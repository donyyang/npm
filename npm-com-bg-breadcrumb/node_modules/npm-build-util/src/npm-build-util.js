// 第三方
import fs from 'fs';
import path from 'path';
import moment from 'moment';
import child_process from 'child_process';

/**
 * @module npm-build-util
 * @desc 包含node端使用的工具方法
 * @author swg [源码地址](http://gitlab.sys.bandubanxie.com/fe/npm/tree/master/npm-build-util)
 */
export default {
  /**
   * 格式化当前时间
   * @return {String}
   */
  getNow () {
    return moment().format(`YYYY-MM-DD HH:mm:ss ${moment().millisecond()}`);
  },

  /**
   * 获取项目路径
   * @return {String}
   */
  getProjectPath () {
    return path.resolve('');
  },

  /**
   * 获取项目名称
   * @return {String}
   */
  getProjectName () {
    return path.basename(this.getProjectPath());
  },

  /**
   * 对象格式化成标准Json格式（空格+2缩进）
   * @param {Object} obj 需要被格式化的对象
   * @return {String}
   */
  stringifyFormat(obj) {
    return JSON.stringify(obj, ' ', 2);
  },

  /**
   * 自动为目标路径创建不存在的文件夹
   * @param {String} path 路径
   */
  autoMkDir(path) {
    // 计算path每一级目录的路径
    let dirArr = path.split('/');
    dirArr.forEach((item, i) => {
      dirArr[i] = `${i > 0 ? dirArr[i - 1] + '/' : ''}${item}`;
    });

    // 检查每级路径是否存在，不存在则创建文件夹
    for (let i = 0; i < dirArr.length - 1; i++) {
      let dirName = dirArr[i];
      if (dirName && !fs.existsSync(dirName)) {
        fs.mkdirSync(dirName);
      }
    }
  },

  /**
   * 复制文件（自动为目标路径创建不存在的文件夹）
   * @param {String} src 原文件路径
   * @param {String} dest 目标文件路径
   */
  copyFile(src, dest) {
    this.autoMkDir(dest);
    fs.copyFileSync(src, dest);
  },

  /**
   * 异步执行命令
   * @param cmd 被执行的命令
   * @return {Promise}
   */
  async execCmd(cmd) {
    return new Promise((resolve, reject) => {
      console.log(`开始执行 [${cmd}]`);

      // 执行cmd
      let child = child_process.exec(cmd);

      child.stdout.on('data', data => {
        console.log(data);
      });

      child.stderr.on('data', data => {
        console.error(data);
      });

      child.on('close', function (code) {
        if (code === 0) {
          console.log(`执行成功 [code=${code}]`);
          resolve(code);
        } else {
          console.log(`执行失败 [code=${code}]`);
          reject(code);
        }
      });
    });
  },

  /**
   * 在当前模块node_modules下或者统计找某个模块中的文件
   * @param filePath
   */
  findInInnerOrBrother (filePath) {
    let finalPath = null;
    let projectPath = path.resolve('');

    let pathArr = [
      `${projectPath}/node_modules/${filePath}`,
      `${projectPath}/../${filePath}`,
    ];

    for (let path of pathArr) {
      console.log(`开始查找文件[${path}]`);
      if (fs.existsSync(path)) {
        finalPath = path;
        break;
      }
    }

    if (finalPath) {
      console.log(`已经找到文件[${finalPath}]`);
      return finalPath;
    } else {
      throw new Error(`找不到[${filePath}]文件`);
    }
  },

  /**
   * 判断当前运行环境是Linux服务器
   * @returns {Boolean}
   */
  isLinux () {
    return typeof global !== 'undefined' && global.process && global.process.platform === 'linux';
  },
}

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

var _webpackNodeExternals = _interopRequireDefault(require("webpack-node-externals"));

var _npmBuildUtil = _interopRequireDefault(require("npm-build-util"));

var _npmBuildConfig = _interopRequireDefault(require("npm-build-config"));

var _npmBuildWebpackBase = _interopRequireDefault(require("npm-build-webpack-base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 第三方
// 组件库
// import util from 'npm-build-util';
// 获取模块名
// let modulePath = path.resolve(__dirname, '../../../');
var modulePath = _path.default.resolve('');

var moduleName = _path.default.basename(modulePath);

var mainSuffix = "";

if (moduleName.startsWith("npm-com-")) {
  mainSuffix = '.vue';
} else if (moduleName.startsWith("npm-scss-")) {
  mainSuffix = '.scss';
} else if (moduleName.startsWith("npm-js-")) {
  mainSuffix = '.js';
}

var mainPath = "".concat(modulePath, "/src/").concat(moduleName).concat(mainSuffix);
/**
 * 中划线命名转驼峰命名
 * @param name
 * @return {string}
 */

var lineThroughToCamel = function lineThroughToCamel(name) {
  var arr = name.split('-');
  arr = arr.map(function (item, i) {
    if (i > 0) {
      var arr = item.split('');
      arr[0] = arr[0].toUpperCase();
      return arr.join('');
    } else {
      return item;
    }
  });
  return arr.join('');
};

var camelModuleName = lineThroughToCamel(moduleName); // 编译类型后缀

var suffix = '';
var target = 'none';
var isServer = '';
var isClient = '';

if (process.env.target === 'server') {
  target = 'node'; // suffix = `.${process.env.target}`;

  isServer = true;
  isClient = false;
} else if (process.env.target === 'client') {
  target = 'web';
  suffix = ".".concat(process.env.target);
  isClient = true;
  isServer = false;
} // 压缩后缀


if (_npmBuildConfig.default.env.mini === true) {
  suffix += ".min";
}

var setting = {
  target: target,
  entry: mainPath,
  output: {
    // 导出路径+文件名
    path: "".concat(modulePath, "/dist"),
    filename: "".concat(moduleName).concat(suffix, ".js"),
    // 编译成umd导出方式
    libraryTarget: 'umd',
    // 设置umd导出方式时global和AMD模块名称
    library: camelModuleName,
    // 设置umd导出方式时是否为AMD模块命名.
    umdNamedDefine: true
  },
  // 资源优化
  mode: 'none',
  optimization: {
    minimize: _npmBuildConfig.default.env.mini ? true : false
  },
  // 模块解析配置
  resolve: {
    alias: _npmBuildConfig.default.getAlias(process.env.target)
  },
  // 源码调试信息
  devtool: _npmBuildUtil.default.isLinux() && _npmBuildConfig.default.env.env === 'prod' ? 'none' : 'source-map',
  // 插件
  plugins: [// 选择性编译插件
  new _webpack.default.DefinePlugin({
    'Define.isServer': isServer,
    'Define.isClient': isClient
  })]
}; // // 只对client端应用alias
// if (process.env.target === 'client') {
//   setting.resolve.alias = config.getAlias(process.env.target);
// }
// 服务端外置化资源

if (process.env.target === 'server') {
  // setting.externals = nodeExternals({
  //   whitelist: [
  //     // /^npm-/,
  //   ],
  // });
  // https://webpack.js.org/configuration/externals/#function
  // https://github.com/liady/webpack-node-externals
  // 外置化应用程序依赖模块。可以使服务器构建速度更快，
  // 并生成较小的 bundle 文件。
  // 外置的模块将不会被预处理（也不会被应用alias）
  setting.externals = (0, _webpackNodeExternals.default)({
    // 不要外置化 webpack 需要处理的依赖模块。
    // 你可以在、这里添加更多的文件类型。例如，未处理 *.vue 原始文件，
    // 你还应该将修改 `global`（例如 polyfill）的依赖模块列入白名单
    whitelist: [// 一切样式相关都需要通过webpack打包到vue-ssr-server-bundle.json文件中，样式才能够被content.renderStyles记录，达到服务端渲染直出效果
    /^npm-scss-/, /\.css$/]
  });
}

var _default = (0, _webpackMerge.default)(_npmBuildWebpackBase.default, setting);

exports.default = _default;
// 第三方
import fs from 'fs';
import path from 'path';
import autoprefixer from 'autoprefixer';
import VueLoaderPlugin from 'vue-loader/lib/plugin';
import StyleLintPlugin from 'stylelint-webpack-plugin';

// 组件库
import util from 'npm-build-util';
import config from 'npm-build-config';
import runtime from 'npm-js-runtime';

// 解决 vue-lazyload 编译报错问题
(function () {
  var babelConfigPath = path.resolve(`node_modules/vue-lazyload/.babelrc`);
  if (fs.existsSync(babelConfigPath)) {
    fs.writeFileSync(babelConfigPath, '{}', {flag: 'w'});
  }
})();

// 字符替换loader，替换全局环境变量
let replaceLoader = {
  loader: path.resolve(`${__dirname}/loader/replace-loader.js`),
  options: {
    replacer: (function () {
      let replacer = Object.assign({}, config.replacer);
      delete replacer.regex;
      return replacer;
    })(),
  },
};


let babel = JSON.parse(fs.readFileSync(util.findInInnerOrBrother('npm-build-babel-deps/.babelrc.json'), 'utf-8'));

let isModule = path.basename(path.resolve('')).startsWith('npm-');

let json = {
  module: {
    // 每个rule内部的loader的执行顺序为倒序（后注册先执行）
    rules: [
      // vue-loader
      {
        test: /\.vue$/,
        use: [
          {
            loader: 'vue-loader',
            // options: {
            //   // 处理vue中引用的css
            //   postcss: [
            //     autoprefixer(config.autoprefixer),
            //   ],
            //   loaders: {
            //     js: [
            //       {
            //         loader: 'babel-loader',
            //         options: babel,
            //       },
            //     ],
            //   }
            // }
          },
          replaceLoader,
        ],
      },

      // js-loader
      {
        test: /\.js$/,
        use: [
          {
            loader: 'babel-loader',
            options: babel,
          },
          replaceLoader,
        ],
        // 加快编译速度，组件库模块已编译过，加上它在项目底下编译模块时会有问题
        // exclude: /npm-/
      },

      // json-loader
      {
        test: /\.json$/,
        type: 'javascript/auto',
        use: [
          {
            loader: 'json-loader'
          },
          replaceLoader,
        ],
      },

      // scss-loader
      {
        test: /\.(scss|css)$/,
        use: [
          {
            loader: 'vue-style-loader'
          },
          {
            loader: 'css-loader'
          },
          {
            loader: 'postcss-loader',
            options: {
              plugins: [
                autoprefixer(config.autoprefixer),
              ]
            }
          },
          replaceLoader,
          {
            loader: 'sass-loader',
            options: {
              // 解决sass本身无法使用相对路径问题
              includePaths: [
                `${path.resolve('node_modules')}/`,
              ],
              outputStyle: config.env.mini || isModule ? 'compressed' : 'expanded',
              sourceComments: config.env.mini || isModule ? false : true,
              sourceMap: config.env.mini || isModule ? false : true,
              sourceMapContents: config.env.mini || isModule ? false : true,
              sourceMapEmbed: config.env.mini || isModule ? false : true,
            },
          },
        ],
      },

      // img-loader
      {
        test: /\.(png|jpg|jpeg|gif|svg)$/,
        use: [
          {
            loader: 'url-loader',
            options: {
              // 最大50KB
              // limit: 50 * 1024,
            },
          },
        ],
      },

      // font-loader
      {
        test: /\.(ttf|eot|svg|woff|woff2)$/,
        use: [
          {
            loader: 'url-loader',
            options: {
              // 最大50KB
              // limit: 50 * 1024,
            },
          },
        ],
      },
    ],
  },

  plugins: [
    // 复制其他loader到vue-loader
    new VueLoaderPlugin(),
  ],

  resolve: {
    alias: {
      // 本地开发使用开发版严格校验，发布到公共环境时使用压缩版避免严格校验产生的报错（严格校验促进更优秀的代码质量）
      // vue: config.env.env ? 'vue/dist/vue.min.js' : 'vue/dist/vue.js',
    }
  },
};

/* eslint loader creator */
function createEslintLoader({canFix} = {}) {
  return {
    loader: 'eslint-loader',
    options: {
      // 规则配置文件位置
      configFile: `${__dirname}/../.eslintrc.json`,

      // 出错停止编译
      // failOnError: true,

      // 是否自动修复文件（只能修复.js格式文件）
      fix: canFix && config.env.repair ? true : false,
    }
  };
}

/* 是否需要代码风格检测，发布stage时强制代码检查 */
if (config.env.check || runtime.isLinux() && config.env.env === 'stage') {
  // vue代码格式校验
  json.module.rules[0].use.push({
    loader: 'htmllint-loader',
    query: {
      config: `${__dirname}/../.htmllintrc.json`, // path to custom config file
      failOnError: false,
      failOnWarning: false,
    },
  });

  // js代码格式校验
  json.module.rules[1].use.push(createEslintLoader({canFix: true}));
  // json.module.rules[1].use[0].options.loaders.js.push(createEslintLoader({canFix: false}));

  // css代码格式校验
  let stylelintFiles = [];
  try {
    let routeListText = fs.readFileSync(path.resolve('src/entry/route_list.js'), 'utf-8').toString();
    let pageArr = routeListText.match(/ name: '(.+)',/g).map(function (item) {
      return item.replace(" name: '", "").replace("',", "");
    });

    stylelintFiles = ['src/common/**/*.scss'];
    stylelintFiles = stylelintFiles.concat(pageArr.map(function (item) {
      return 'src/page/' + item + '/**/*.scss';
    }));
  } catch (err) {
    stylelintFiles = [
      'src/**/*.scss',
    ];
  }
  json.plugins.push(new StyleLintPlugin({
    configFile: `${__dirname}/../.stylelintrc.json`,
    syntax: 'scss',
    files: stylelintFiles,
    fix: config.env.repair ? true : false,
  }));
}

export default json;

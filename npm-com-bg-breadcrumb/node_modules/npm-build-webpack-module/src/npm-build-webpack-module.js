// 第三方
import path from 'path';
import webpack from 'webpack';
import merge from 'webpack-merge';
import nodeExternals from 'webpack-node-externals';

// 组件库
import util from 'npm-build-util';
import config from 'npm-build-config';
// import util from 'npm-build-util';
import loaders from 'npm-build-webpack-base';

// 获取模块名
// let modulePath = path.resolve(__dirname, '../../../');
let modulePath = path.resolve('');
let moduleName = path.basename(modulePath);
let mainSuffix = ``;
if (moduleName.startsWith(`npm-com-`)) {
  mainSuffix = '.vue';
} else if (moduleName.startsWith(`npm-scss-`)) {
  mainSuffix = '.scss';
} else if (moduleName.startsWith(`npm-js-`)) {
  mainSuffix = '.js';
}
let mainPath = `${modulePath}/src/${moduleName}${mainSuffix}`;

/**
 * 中划线命名转驼峰命名
 * @param name
 * @return {string}
 */
var lineThroughToCamel = function (name) {
  var arr = name.split('-');
  arr = arr.map(function (item, i) {
    if (i > 0) {
      var arr = item.split('');
      arr[0] = arr[0].toUpperCase();
      return arr.join('');
    } else {
      return item;
    }
  })
  return arr.join('');
};

var camelModuleName = lineThroughToCamel(moduleName);

// 编译类型后缀
let suffix = '';
let target = 'none';
let isServer = '';
let isClient = '';
if (process.env.target === 'server') {
  target = 'node';
  // suffix = `.${process.env.target}`;
  isServer = true;
  isClient = false;
} else if (process.env.target === 'client') {
  target = 'web';
  suffix = `.${process.env.target}`;
  isClient = true;
  isServer = false;
}

// 压缩后缀
if (config.env.mini === true) {
  suffix += `.min`;
}

let setting = {
  target,

  entry: mainPath,

  output: {
    // 导出路径+文件名
    path: `${modulePath}/dist`,
    filename: `${moduleName}${suffix}.js`,

    // 编译成umd导出方式
    libraryTarget: 'umd',

    // 设置umd导出方式时global和AMD模块名称
    library: camelModuleName,

    // 设置umd导出方式时是否为AMD模块命名.
    umdNamedDefine: true,
  },

  // 资源优化
  mode: 'none',
  optimization: {
    minimize: config.env.mini ? true : false,
  },

  // 模块解析配置
  resolve: {
    alias: config.getAlias(process.env.target),
  },

  // 源码调试信息
  devtool: util.isLinux() && config.env.env === 'prod' ? 'none' : 'source-map',

  // 插件
  plugins: [
    // 选择性编译插件
    new webpack.DefinePlugin({
      'Define.isServer': isServer,
      'Define.isClient': isClient,
    }),
  ],
};

// // 服务端外置化资源
// if (process.env.target === 'server') {
//   setting.externals = nodeExternals({
//     whitelist: [
//       // /^npm-/,
//     ],
//   });
// }

export default merge(loaders, setting);

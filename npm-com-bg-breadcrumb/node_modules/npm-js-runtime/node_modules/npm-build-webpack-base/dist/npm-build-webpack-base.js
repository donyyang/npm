"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _autoprefixer = _interopRequireDefault(require("autoprefixer"));

var _plugin = _interopRequireDefault(require("vue-loader/lib/plugin"));

var _stylelintWebpackPlugin = _interopRequireDefault(require("stylelint-webpack-plugin"));

var _npmBuildUtil = _interopRequireDefault(require("npm-build-util"));

var _npmBuildConfig = _interopRequireDefault(require("npm-build-config"));

var _npmJsRuntime = _interopRequireDefault(require("npm-js-runtime"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// 解决 vue-lazyload 编译报错问题
(function () {
  var babelConfigPath = _path.default.resolve("node_modules/vue-lazyload/.babelrc");

  if (_fs.default.existsSync(babelConfigPath)) {
    _fs.default.writeFileSync(babelConfigPath, '{}', {
      flag: 'w'
    });
  }
})(); // 字符替换loader，替换全局环境变量


var replaceLoader = {
  loader: _path.default.resolve("".concat(__dirname, "/loader/replace-loader.js")),
  options: {
    replacer: function () {
      var replacer = _extends({}, _npmBuildConfig.default.replacer);

      delete replacer.regex;
      return replacer;
    }()
  }
};
var babel = JSON.parse(_fs.default.readFileSync(_npmBuildUtil.default.findInInnerOrBrother('npm-build-babel-deps/.babelrc.json'), 'utf-8'));
var json = {
  module: {
    // 每个rule内部的loader的执行顺序为倒序（后注册先执行）
    rules: [// vue-loader
    {
      test: /\.vue$/,
      use: [{
        loader: 'vue-loader' // options: {
        //   // 处理vue中引用的css
        //   postcss: [
        //     autoprefixer(config.autoprefixer),
        //   ],
        //   loaders: {
        //     js: [
        //       {
        //         loader: 'babel-loader',
        //         options: babel,
        //       },
        //     ],
        //   }
        // }

      }, replaceLoader]
    }, // js-loader
    {
      test: /\.js$/,
      use: [{
        loader: 'babel-loader',
        options: babel
      }, replaceLoader] // 加快编译速度，组件库模块已编译过，加上它在项目底下编译模块时会有问题
      // exclude: /npm-/

    }, // json-loader
    {
      test: /\.json$/,
      type: 'javascript/auto',
      use: [{
        loader: 'json-loader'
      }, replaceLoader]
    }, // scss-loader
    {
      test: /\.(scss|css)$/,
      use: [{
        loader: 'vue-style-loader'
      }, {
        loader: 'css-loader'
      }, {
        loader: 'postcss-loader',
        options: {
          plugins: [(0, _autoprefixer.default)(_npmBuildConfig.default.autoprefixer)]
        }
      }, {
        loader: 'sass-loader',
        options: {
          // 解决sass本身无法使用相对路径问题
          includePaths: ["".concat(_path.default.resolve('node_modules'), "/")],
          outputStyle: _npmBuildConfig.default.env.mini ? 'compressed' : 'expanded',
          sourceComments: _npmBuildConfig.default.env.mini ? false : true,
          sourceMap: _npmBuildConfig.default.env.mini ? false : true,
          sourceMapContents: _npmBuildConfig.default.env.mini ? false : true,
          sourceMapEmbed: _npmBuildConfig.default.env.mini ? false : true
        }
      }, replaceLoader]
    }, // img-loader
    {
      test: /\.(png|jpg|jpeg|gif|svg)$/,
      use: [{
        loader: 'url-loader',
        options: {// 最大50KB
          // limit: 50 * 1024,
        }
      }]
    }, // font-loader
    {
      test: /\.(ttf|eot|svg|woff|woff2)$/,
      use: [{
        loader: 'url-loader',
        options: {// 最大50KB
          // limit: 50 * 1024,
        }
      }]
    }]
  },
  plugins: [// 复制其他loader到vue-loader
  new _plugin.default()],
  resolve: {
    alias: {// 本地开发使用开发版严格校验，发布到公共环境时使用压缩版避免严格校验产生的报错（严格校验促进更优秀的代码质量）
      // vue: config.env.env ? 'vue/dist/vue.min.js' : 'vue/dist/vue.js',
    }
  }
};
/* eslint loader creator */

function createEslintLoader() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      canFix = _ref.canFix;

  return {
    loader: 'eslint-loader',
    options: {
      // 规则配置文件位置
      configFile: "".concat(__dirname, "/../.eslintrc.json"),
      // 出错停止编译
      // failOnError: true,
      // 是否自动修复文件（只能修复.js格式文件）
      fix: canFix && _npmBuildConfig.default.env.repair ? true : false
    }
  };
}
/* 是否需要代码风格检测，发布stage时强制代码检查 */


if (_npmBuildConfig.default.env.check || _npmJsRuntime.default.isLinux() && _npmBuildConfig.default.env.env === 'stage') {
  // vue代码格式校验
  json.module.rules[0].use.push({
    loader: 'htmllint-loader',
    query: {
      config: "".concat(__dirname, "/../.htmllintrc.json"),
      // path to custom config file
      failOnError: false,
      failOnWarning: false
    }
  }); // js代码格式校验

  json.module.rules[1].use.push(createEslintLoader({
    canFix: true
  })); // json.module.rules[1].use[0].options.loaders.js.push(createEslintLoader({canFix: false}));
  // css代码格式校验

  var stylelintFiles = [];

  try {
    var routeListText = _fs.default.readFileSync(_path.default.resolve('src/entry/route_list.js'), 'utf-8').toString();

    var pageArr = routeListText.match(/ name: '(.+)',/g).map(function (item) {
      return item.replace(" name: '", "").replace("',", "");
    });
    stylelintFiles = ['src/common/**/*.scss'];
    stylelintFiles = stylelintFiles.concat(pageArr.map(function (item) {
      return 'src/page/' + item + '/**/*.scss';
    }));
  } catch (err) {
    stylelintFiles = ['src/**/*.scss'];
  }

  json.plugins.push(new _stylelintWebpackPlugin.default({
    configFile: "".concat(__dirname, "/../.stylelintrc.json"),
    syntax: 'scss',
    files: stylelintFiles,
    fix: _npmBuildConfig.default.env.repair ? true : false
  }));
}

var _default = json;
exports.default = _default;
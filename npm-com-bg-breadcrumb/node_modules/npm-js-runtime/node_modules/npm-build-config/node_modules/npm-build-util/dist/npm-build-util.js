"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _fs = _interopRequireDefault(require("fs"));

var _path2 = _interopRequireDefault(require("path"));

var _moment = _interopRequireDefault(require("moment"));

var _child_process = _interopRequireDefault(require("child_process"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * @module npm-build-util
 * @desc 包含node端使用的工具方法
 * @author swg [源码地址](http://gitlab.sys.bandubanxie.com/fe/npm/tree/master/npm-build-util)
 */
var _default = {
  /**
   * 格式化当前时间
   * @return {String}
   */
  getNow: function getNow() {
    return (0, _moment.default)().format("YYYY-MM-DD HH:mm:ss ".concat((0, _moment.default)().millisecond()));
  },

  /**
   * 获取项目路径
   * @return {String}
   */
  getProjectPath: function getProjectPath() {
    return _path2.default.resolve('');
  },

  /**
   * 获取项目名称
   * @return {String}
   */
  getProjectName: function getProjectName() {
    return _path2.default.basename(this.getProjectPath());
  },

  /**
   * 对象格式化成标准Json格式（空格+2缩进）
   * @param {Object} obj 需要被格式化的对象
   * @return {String}
   */
  stringifyFormat: function stringifyFormat(obj) {
    return JSON.stringify(obj, ' ', 2);
  },

  /**
   * 自动为目标路径创建不存在的文件夹
   * @param {String} path 路径
   */
  autoMkDir: function autoMkDir(path) {
    // 计算path每一级目录的路径
    var dirArr = path.split('/');
    dirArr.forEach(function (item, i) {
      dirArr[i] = "".concat(i > 0 ? dirArr[i - 1] + '/' : '').concat(item);
    }); // 检查每级路径是否存在，不存在则创建文件夹

    for (var i = 0; i < dirArr.length - 1; i++) {
      var dirName = dirArr[i];

      if (dirName && !_fs.default.existsSync(dirName)) {
        _fs.default.mkdirSync(dirName);
      }
    }
  },

  /**
   * 复制文件（自动为目标路径创建不存在的文件夹）
   * @param {String} src 原文件路径
   * @param {String} dest 目标文件路径
   */
  copyFile: function copyFile(src, dest) {
    this.autoMkDir(dest);

    _fs.default.copyFileSync(src, dest);
  },

  /**
   * 异步执行命令
   * @param cmd 被执行的命令
   * @return {Promise}
   */
  execCmd: function () {
    var _execCmd = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(cmd) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", new Promise(function (resolve, reject) {
                console.log("\u5F00\u59CB\u6267\u884C [".concat(cmd, "]")); // 执行cmd

                var child = _child_process.default.exec(cmd);

                child.stdout.on('data', function (data) {
                  console.log(data);
                });
                child.stderr.on('data', function (data) {
                  console.error(data);
                });
                child.on('close', function (code) {
                  if (code === 0) {
                    console.log("\u6267\u884C\u6210\u529F [code=".concat(code, "]"));
                    resolve(code);
                  } else {
                    console.log("\u6267\u884C\u5931\u8D25 [code=".concat(code, "]"));
                    reject(code);
                  }
                });
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function execCmd(_x) {
      return _execCmd.apply(this, arguments);
    }

    return execCmd;
  }(),

  /**
   * 在当前模块node_modules下或者统计找某个模块中的文件
   * @param filePath
   */
  findInInnerOrBrother: function findInInnerOrBrother(filePath) {
    var finalPath = null;

    var projectPath = _path2.default.resolve('');

    var pathArr = ["".concat(projectPath, "/node_modules/").concat(filePath), "".concat(projectPath, "/../").concat(filePath)];
    var _arr = pathArr;

    for (var _i = 0; _i < _arr.length; _i++) {
      var _path = _arr[_i];
      console.log("\u5F00\u59CB\u67E5\u627E\u6587\u4EF6[".concat(_path, "]"));

      if (_fs.default.existsSync(_path)) {
        finalPath = _path;
        break;
      }
    }

    if (finalPath) {
      console.log("\u5DF2\u7ECF\u627E\u5230\u6587\u4EF6[".concat(finalPath, "]"));
      return finalPath;
    } else {
      throw new Error("\u627E\u4E0D\u5230[".concat(filePath, "]\u6587\u4EF6"));
    }
  },

  /**
   * 判断当前运行环境是Linux服务器
   * @returns {Boolean}
   */
  isLinux: function isLinux() {
    return typeof global !== 'undefined' && global.process && global.process.platform === 'linux';
  }
};
exports.default = _default;